services:
  auth_service:
    build: ./mss/AuthService
    ports:
      - "3000:3000"
    depends_on:
      postgres_auth:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_HOST=postgres_auth
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=mysecretpassword
      - DATABASE_NAME=authdb
    networks:
      - backend

  postgres_auth:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: authdb
    ports:
      - "5433:5432"
    volumes:
      - pgdata_auth:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5

  register_service:
    build: ./mss/RegisterUserService
    ports:
      - "3001:3001"
    depends_on:
      postgres_register:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_HOST=postgres_register
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=mysecretpassword
      - DATABASE_NAME=registerdb
    networks:
      - backend

  postgres_register:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: registerdb
    ports:
      - "5434:5432"
    volumes:
      - pgdata_register:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5


  image_service:
    build: ./mss/ImageService
    volumes:
      - ./mss/ImageService/upload/:/app/upload/
    ports:
      - "3003:3003"
    depends_on:
      - postgres_image
      - rabbitmq
      - redis
    environment:
      - DATABASE_HOST=postgres_image
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=mysecretpassword
      - DATABASE_NAME=imagedb
    networks:
      - backend

  postgres_image:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: imagedb
    ports:
      - "5435:5432"  # Porta diferente para cada instância de Postgres
    volumes:
      - pgdata_image:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
      
      
  allocation_service:
    build: ./mss/AllocationService
    ports:
      - "3003:3003"
    depends_on:
      - postgres_allocation
      - rabbitmq
      - redis
    environment:
      - DATABASE_HOST=postgres_auth
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=mysecretpassword
      - DATABASE_NAME=authdb
    networks:
      - backend

  postgres_allocation:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: authdb
    ports:
      - "5436:5432"  # Porta diferente para cada instância de Postgres
    volumes:
      - pgdata_allocation:/var/lib/postgresql/data
      
      
  classification_service:
    build: ./mss/ClassificationService
    ports:
      - "3002:3002"
    depends_on:
      postgres_classification:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    environment:
      - DATABASE_HOST=postgres_classification
      - DATABASE_PORT=5432
      - DATABASE_USER=postgres
      - DATABASE_PASSWORD=mysecretpassword
      - DATABASE_NAME=classificationdb
    networks:
      - backend


  postgres_classification:
    image: postgres:latest
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: mysecretpassword
      POSTGRES_DB: classificationdb
    ports:
      - "5435:5432"
    volumes:
      - pgdata_classification:/var/lib/postgresql/data
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5


  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: rabbitmq
      RABBITMQ_DEFAULT_PASS: rabbitmq
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "rabbitmqctl status"]
      interval: 30s
      timeout: 10s
      retries: 5

  redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend

volumes:
  pgdata_auth:
  pgdata_register:
  pgdata_image:
  pgdata_allocation:
  pgdata_classification:

networks:
  backend:
    driver: bridge
