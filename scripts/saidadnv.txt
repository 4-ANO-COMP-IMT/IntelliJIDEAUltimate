Conteúdo dos arquivos em './':
===========================================
Arquivo: package.json
{
  "devDependencies": {
    "@types/bootstrap": "^5.2.10",
    "@types/leaflet": "^1.9.12",
    "@types/node": "^20.14.10",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "@typescript-eslint/eslint-plugin": "^7.2.0",
    "@typescript-eslint/parser": "^7.2.0",
    "css-loader": "^7.1.2",
    "eslint": "^8.57.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-prettier": "^5.1.3",
    "eslint-plugin-react": "^7.34.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.6",
    "eslint-webpack-plugin": "^4.2.0",
    "file-loader": "^6.2.0",
    "html-webpack-plugin": "^5.6.0",
    "husky": "^9.0.11",
    "lint-staged": "^15.2.2",
    "prettier": "3.2.5",
    "sass": "^1.77.8",
    "sass-loader": "^14.2.1",
    "style-loader": "^4.0.0",
    "ts-loader": "^9.5.1",
    "typescript": "^4.9.5",
    "webpack": "^5.93.0",
    "webpack-cli": "^5.1.4",
    "webpack-dev-server": "^5.0.4"
  },
  "name": "sgc",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "start": "webpack serve --mode development",
    "build": "webpack --mode production",
    "lint": "eslint .",
    "lint:fix": "eslint --fix .",
    "format": "prettier --check .",
    "write": "prettier --write .",
    "prepare": "husky"
  },
  "keywords": [],
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "axios": "^1.7.2",
    "bootstrap": "^5.3.3",
    "konva": "^9.3.13",
    "react": "^18.3.1",
    "react-bootstrap": "^2.10.4",
    "react-datepicker": "^7.3.0",
    "react-dom": "^18.3.1",
    "react-icons": "^5.2.1",
    "react-konva": "^18.2.10",
    "react-leaflet": "^4.2.1",
    "react-select": "^5.8.0"
  },
  "husky": {
    "hooks": {
      "pre-commit": "lint-staged"
    }
  },
  "lint-staged": {
    "*.{json,js,ts,tsx,html}": [
      "prettier . --write"
    ],
    "*.{js,ts,tsx}": [
      "eslint . --fix"
    ]
  }
}


Arquivo: public/index.html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Sistema Geral de Classificação (SGC)</title>
</head>
<body>
    <div id="root"></div>
</body>
</html>


Arquivo: scripts/listar_arquivos.sh
#!/bin/bash

# Verifica se o diretório e o arquivo de saída foram fornecidos como argumentos
if [ "$#" -ne 2 ]; then
  echo "Uso: $0 <diretório> <arquivo_de_saida>"
  exit 1
fi

# Diretório inicial e arquivo de saída
diretorio_inicial=$1
arquivo_saida=$2

# Extensões de imagem a serem ignoradas
extensoes_imagem=("jpg" "jpeg" "png" "gif" "bmp" "tiff" "webp")

# Função para verificar se um arquivo é uma imagem
is_imagem() {
  local arquivo=$1
  local extensao="${arquivo##*.}"
  for img_ext in "${extensoes_imagem[@]}"; do
    if [ "$extensao" = "$img_ext" ]; then
      return 0
    fi
  done
  return 1
}

# Função recursiva para processar o diretório
processar_diretorio() {
  local diretorio=$1

  # Itera sobre cada item no diretório
  for item in "$diretorio"/*; do
    # Ignora o diretório node_modules
    if [ -d "$item" ] && [ "$(basename "$item")" = "node_modules" ]; then
      continue
    fi

    # Ignora o arquivo package-lock.json
    if [ -f "$item" ] && [ "$(basename "$item")" = "package-lock.json" ]; then
      continue
    fi

    # Verifica se é um arquivo
    if [ -f "$item" ]; then
      # Verifica se o arquivo é uma imagem e ignora se for
      if is_imagem "$item"; then
        continue
      fi
      # Imprime o caminho relativo do arquivo e seu conteúdo no arquivo de saída
      caminho_relativo=$(realpath --relative-to="$diretorio_inicial" "$item")
      echo "Arquivo: $caminho_relativo" >> "$arquivo_saida"
      cat "$item" >> "$arquivo_saida"
      echo -e "\n" >> "$arquivo_saida"
    elif [ -d "$item" ]; then
      # Se for um diretório, chama a função recursivamente
      processar_diretorio "$item"
    fi
  done
}

# Inicializa o arquivo de saída
echo "Conteúdo dos arquivos em '$diretorio_inicial':" > "$arquivo_saida"
echo "===========================================" >> "$arquivo_saida"

# Chama a função recursiva começando pelo diretório inicial
processar_diretorio "$diretorio_inicial"

echo "Processamento concluído. Resultado salvo em '$arquivo_saida'."


Arquivo: scripts/saida.txt
Conteúdo dos arquivos em '../src/componets':
===========================================
Arquivo: Body/Body.tsx
import React from 'react';
import ImageFrame from './ImageFrame/ImageFrame';
import { Button, Container, Dropdown, DropdownButton, Form, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';
import Toolbar from './toolbar';
import FilterDropdown from './FilterDropDown';
import FilterCollapse from './filters/FilterCollapse';

const Body: React.FC = () => {
    return (
        <div className="container">
            <div className="filter-section">
                <FilterCollapse />
            </div>


            <div className="tools">
                <Toolbar />
            </div>
            
            <Container fluid style={{ height: '100vh', padding: 0 }}>
                <ImageFrame />
            </Container>

            <div className="button-bar d-flex justify-content-center">
                <Button variant="primary">Button 1</Button>
                <Button variant="secondary">Button 2</Button>
                <Button variant="success">Button 3</Button>
                {/* Add more buttons as needed */}
            </div>
        </div>
    );
};

export default Body;


Arquivo: Body/FilterDropDown.tsx
import React from 'react';
import { Dropdown, DropdownButton, Form } from 'react-bootstrap';

const FilterDropdown: React.FC = () => {
    return (
        <DropdownButton id="dropdown-basic-button" title="Filtros" className="mb-3">
            <Dropdown.Item as="div">
                <Form.Group controlId="dateFilter">
                    <Form.Label>Data</Form.Label>
                    <Form.Control type="date" placeholder="Selecione a data" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="classFilter">
                    <Form.Label>Classe</Form.Label>
                    <Form.Control type="text" placeholder="Digite a classe" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="regionFilter">
                    <Form.Label>Região</Form.Label>
                    <Form.Control type="text" placeholder="Selecione a região no mapa" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="tagsFilter">
                    <Form.Label>Tags Especiais</Form.Label>
                    <Form.Control type="text" placeholder="Digite as tags" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="flagFilter">
                    <Form.Label>Flag</Form.Label>
                    <Form.Check type="checkbox" label="Ativar flag" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="typeFilter">
                    <Form.Label>Tipo</Form.Label>
                    <Form.Control type="text" placeholder="Digite o tipo" />
                </Form.Group>
            </Dropdown.Item>
        </DropdownButton>
    );
};

export default FilterDropdown;


Arquivo: Body/ImageFrame/BoundingBox.tsx
// BoundingBox.tsx
import React, { useState } from 'react';
import { Layer, Rect, Circle } from 'react-konva';
import { KonvaEventObject } from 'konva/lib/Node';

interface RectProps {
  x: number;
  y: number;
  width: number;
  height: number;
}

interface BoundingBoxProps {
  initialRect: RectProps;
}

const BoundingBox: React.FC<BoundingBoxProps> = ({ initialRect }) => {
  const [rectangle, setRectangle] = useState<RectProps>(initialRect);

  const handleDragMove = (e: KonvaEventObject<DragEvent>, index: number) => {
    const newRect = { ...rectangle };
    if (index === 0) {
      newRect.x = e.target.x();
      newRect.y = e.target.y();
    } else if (index === 1) {
      newRect.width = e.target.x() - newRect.x;
      newRect.height = e.target.y() - newRect.y;
    }
    setRectangle(newRect);
  };

  const handleDragEnd = () => {};

  return (
    <>
      <Rect
        x={rectangle.x}
        y={rectangle.y}
        width={rectangle.width}
        height={rectangle.height}
        stroke="blue"
        strokeWidth={2}
        draggable
        onDragMove={(e) => handleDragMove(e, 0)}
        onDragEnd={handleDragEnd}
      />
      <Circle
        x={rectangle.x}
        y={rectangle.y}
        radius={5}
        fill="blue"
        draggable
        onDragMove={(e) => handleDragMove(e, 0)}
        onDragEnd={handleDragEnd}
      />
      <Circle
        x={rectangle.x + rectangle.width}
        y={rectangle.y + rectangle.height}
        radius={5}
        fill="red"
        draggable
        onDragMove={(e) => handleDragMove(e, 1)}
        onDragEnd={handleDragEnd}
      />
    </>
  );
};

export default BoundingBox;


Arquivo: Body/ImageFrame/Geometry.tsx
// Geometry.tsx
import React from 'react';
import PolyLine from './PolyLine';
import BoundingBox from './BoundingBox';

interface GeometryProps {
  type: 'polyline' | 'rectangle';
  points?: { x: number; y: number }[];
  initialRect?: { x: number; y: number; width: number; height: number };
}

const Geometry: React.FC<GeometryProps> = ({ type, points, initialRect }) => {
  if (type === 'polyline' && points) {
    return <PolyLine points={points} />;
  } else if (type === 'rectangle' && initialRect) {
    return <BoundingBox initialRect={initialRect} />;
  }
  return null;
};

export default Geometry;


Arquivo: Body/ImageFrame/ImageFrame.tsx
// ImageFrame.tsx
import React, { useRef, useEffect, useState } from 'react';
import { Stage, Layer, Rect } from 'react-konva';
import Geometry from './Geometry';

interface Point {
  x: number;
  y: number;
}

interface RectProps {
  x: number;
  y: number;
  width: number;
  height: number;
}

interface GeometryItem {
  type: 'polyline' | 'rectangle';
  points?: Point[];
  initialRect?: RectProps;
}

const ImageFrame: React.FC = () => {
  const containerRef = useRef<HTMLDivElement>(null);
  const [dimensions, setDimensions] = useState({ width: window.innerWidth, height: window.innerHeight });

  useEffect(() => {
    const handleResize = () => {
      if (containerRef.current) {
        setDimensions({
          width: containerRef.current.offsetWidth,
          height: containerRef.current.offsetHeight,
        });
      }
    };

    window.addEventListener('resize', handleResize);
    handleResize();

    return () => {
      window.removeEventListener('resize', handleResize);
    };
  }, []);

  const geometries: GeometryItem[] = [
    {
      type: 'polyline',
      points: [
        { x: 50, y: 60 },
        { x: 200, y: 80 },
        { x: 300, y: 200 },
      ],
    },
    {
      type: 'rectangle',
      initialRect: { x: 400, y: 150, width: 150, height: 100 },
    },
  ];

  return (
    <div ref={containerRef} style={{ width: '100%', height: '100%', backgroundColor:'#5c949f' }}>
        {/* aaaa: {dimensions.width} x {dimensions.height} */}
      <Stage width={dimensions.width} height={dimensions.height}>
        <Layer>
          <Rect
            x={0}
            y={0}
            width={dimensions.width}
            height={dimensions.height}
            fill="lightgray"  // Cor de fundo do canvas
          />
          {geometries.map((geo, index) => (
            <Geometry
              key={index}
              type={geo.type}
              points={geo.points}
              initialRect={geo.initialRect}
            />
          ))}
        </Layer>
      </Stage>
    </div>
  );
};

export default ImageFrame;


Arquivo: Body/ImageFrame/PolyLine.tsx
// PolyLine.tsx
import React, { useState } from 'react';
import { Layer, Line, Circle } from 'react-konva';
import { KonvaEventObject } from 'konva/lib/Node';

interface Point {
  x: number;
  y: number;
}

interface PolyLineProps {
  points: Point[];
}

const PolyLine: React.FC<PolyLineProps> = ({ points }) => {
  const [polyPoints, setPolyPoints] = useState<Point[]>(points);

  const handleDragMove = (e: KonvaEventObject<DragEvent>, index: number) => {
    const newPoints = [...polyPoints];
    newPoints[index] = { x: e.target.x(), y: e.target.y() };
    setPolyPoints(newPoints);
  };

  const handleDragEnd = () => {};

  const handleInsertPoint = (index: number, newPoint: Point) => {
    const newPoints = [...polyPoints];
    newPoints.splice(index, 0, newPoint);
    setPolyPoints(newPoints);
  };

  const calculateMidPoint = (pointA: Point, pointB: Point): Point => {
    return {
      x: (pointA.x + pointB.x) / 2,
      y: (pointA.y + pointB.y) / 2,
    };
  };

  return (
      <>
      <Line
        points={polyPoints.flatMap(p => [p.x, p.y])}
        stroke="red"
        strokeWidth={2}
      />
      {polyPoints.map((point, index) => (
        <Circle
          key={index}
          x={point.x}
          y={point.y}
          radius={5}
          fill="blue"
          draggable
          onDragMove={(e) => handleDragMove(e, index)}
          onDragEnd={handleDragEnd}
        />
      ))}
      {polyPoints.map((point, index) => {
        if (index === polyPoints.length - 1) return null;
        const midPoint = calculateMidPoint(point, polyPoints[index + 1]);
        return (
          <Circle
            key={`mid-${index}`}
            x={midPoint.x}
            y={midPoint.y}
            radius={5}
            fill="green"
            draggable
            onDragEnd={(e) => handleInsertPoint(index + 1, { x: e.target.x(), y: e.target.y() })}
          />
        );
      })}
      </>
  );
};

export default PolyLine;


Arquivo: Body/filters/ClassFilter.tsx
import React, { useState } from 'react';
import { Form } from 'react-bootstrap';
import Select from 'react-select';

const classOptions = [
    { value: 1, label: 'Classe 1' },
    { value: 2, label: 'Classe 2' },
    { value: 3, label: 'Classe 3' },
    // Adicione mais opções conforme necessário
];

const ClassFilter: React.FC = () => {
    const [selectedClasses, setSelectedClasses] = useState<any[]>([]);

    return (
        <Form.Group controlId="classFilter">
            <Form.Label>Classe</Form.Label>
            <Select
                isMulti
                options={classOptions}
                value={selectedClasses}
                onChange={(newValue, actionMeta) => setSelectedClasses(Array.from(newValue))}
                placeholder="Selecione as classes"
            />
        </Form.Group>
    );
};

export default ClassFilter;


Arquivo: Body/filters/DateFilter.tsx
import React, { useState } from 'react';
import { Form, Row, Col } from 'react-bootstrap';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const DateFilter: React.FC = () => {
    const [startDate, setStartDate] = useState<Date | null>(null);
    const [endDate, setEndDate] = useState<Date | null>(null);

    return (
        <Form.Group controlId="dateFilter">
            <Form.Label>Data</Form.Label>
            <Row>
                <Col>
                    <Form.Label>Início</Form.Label>
                    <DatePicker
                        selected={startDate}
                        onChange={(date) => setStartDate(date)}
                        className="form-control"
                        placeholderText="Data de Início"
                    />
                </Col>
                <Col>
                    <Form.Label>Fim</Form.Label>
                    <DatePicker
                        selected={endDate}
                        onChange={(date) => setEndDate(date)}
                        className="form-control"
                        placeholderText="Data de Fim"
                    />
                </Col>
            </Row>
        </Form.Group>
    );
};

export default DateFilter;


Arquivo: Body/filters/FilterCollapse.tsx
import React, { useState } from 'react';
import { Button, Collapse, Form, Card } from 'react-bootstrap';
import { FaChevronDown, FaChevronUp } from 'react-icons/fa';
import DateFilter from './DateFilter';
import ClassFilter from './ClassFilter';
import RegionFilter from './RegionMap/RegionFilter';
import TagsFilter from './TagsFilter';
import FlagFilter from './FlagFilter';
import TypeFilter from './TypeFilter';

const FilterCollapse: React.FC = () => {
    const [open, setOpen] = useState(false);

    return (
        <>
            <Button
                onClick={() => setOpen(!open)}
                aria-controls="example-collapse-text"
                aria-expanded={open}
                className="mb-3"
                variant="primary"
            >
                Filtros {open ? <FaChevronUp /> : <FaChevronDown />}
            </Button>
            <Collapse in={open}>
                <div id="example-collapse-text">
                    <Card>
                        <Card.Body>
                            <Form>
                                <DateFilter />
                                <ClassFilter />
                                <RegionFilter isOpen={open} />
                                <TagsFilter />
                                <FlagFilter />
                                <TypeFilter />
                            </Form>
                        </Card.Body>
                    </Card>
                </div>
            </Collapse>
        </>
    );
};

export default FilterCollapse;


Arquivo: Body/filters/FlagFilter.tsx
import React from 'react';
import { Form } from 'react-bootstrap';

const FlagFilter: React.FC = () => {
    return (
        <Form.Group controlId="flagFilter">
            <Form.Label>Flag</Form.Label>
            <Form.Check type="checkbox" label="Ativar flag" />
        </Form.Group>
    );
};

export default FlagFilter;


Arquivo: Body/filters/RegionMap/MapView.tsx
import React, { useEffect } from 'react';
import { MapContainer, TileLayer, Polygon, Marker, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

const MapView: React.FC<{ center: [number, number]; zoom: number; selectedRegion: any[]; isPolygon: boolean; isOpen: boolean; }> = ({ center, zoom, selectedRegion, isPolygon, isOpen }) => {
    const MapEvents = () => {
        const map = useMap();

        useEffect(() => {
            map.invalidateSize();
        }, [isOpen]);

        map.setView(center, zoom);
        return null;
    };

    return (
        <div style={{ height: '400px', width: '100%' }}>
            <MapContainer center={center} zoom={zoom} style={{ height: '100%', width: '100%' }}>
                <TileLayer
                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution="&copy; OpenStreetMap contributors"
                />
                {isPolygon ? (
                    <Polygon positions={selectedRegion} />
                ) : (
                    <Marker position={center} icon={L.icon({
                        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                    })} />
                )}
                <MapEvents />
            </MapContainer>
        </div>
    );
};

export default MapView;


Arquivo: Body/filters/RegionMap/RegionFilter.tsx
import React, { useState, useEffect } from 'react';
import { Row, Col, Card } from 'react-bootstrap';
import axios from 'axios';
import MapView from './MapView';
import SearchBar from './SearchBar';
import ResultList from './ResultList';

const RegionFilter: React.FC<{ isOpen: boolean }> = ({ isOpen }) => {
    const [selectedRegion, setSelectedRegion] = useState<any[]>([]);
    const [center, setCenter] = useState<[number, number]>([0, 0]);
    const [zoom, setZoom] = useState<number>(2);
    const [isPolygon, setIsPolygon] = useState<boolean>(false);
    const [loading, setLoading] = useState<boolean>(false);
    const [foundPlaces, setFoundPlaces] = useState<any[]>([]);
    const [selectedPlace, setSelectedPlace] = useState<any>(null);

    useEffect(() => {
        if (isOpen) {
            setTimeout(() => {
                window.dispatchEvent(new Event('resize'));
            }, 100);
        }
    }, [isOpen]);

    const handleSearch = async (placeName: string) => {
        if (!placeName) return;

        setLoading(true);
        try {
            const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {
                params: {
                    q: placeName,
                    format: 'json',
                    polygon_geojson: 1,
                },
            });

            if (response.data.length > 0) {
                setFoundPlaces(response.data);
            } else {
                alert('Local não encontrado');
                setFoundPlaces([]);
            }
        } catch (error) {
            console.error('Erro ao buscar o local:', error);
            alert('Erro ao buscar o local');
            setFoundPlaces([]);
        } finally {
            setLoading(false);
        }
    };

    const selectPlace = (place: any) => {
        setSelectedPlace(place);
        if (place.geojson && place.geojson.type === 'Polygon') {
            const coordinates = place.geojson.coordinates[0].map((coord: [number, number]) => ({
                lat: coord[1],
                lng: coord[0],
            }));
            setSelectedRegion(coordinates);
            setCenter([parseFloat(place.lat), parseFloat(place.lon)]);
            setZoom(10);
            setIsPolygon(true);
        } else {
            setSelectedRegion([]);
            setCenter([parseFloat(place.lat), parseFloat(place.lon)]);
            setZoom(15);
            setIsPolygon(false);
        }
    };

    return (
        <Card className="mb-3">
            <Card.Body>
                <Row>
                    <Col md={8}>
                        <MapView center={center} zoom={zoom} selectedRegion={selectedRegion} isPolygon={isPolygon} isOpen={isOpen} />
                    </Col>
                    <Col md={4}>
                        <SearchBar onSearch={handleSearch} loading={loading} />
                        <ResultList places={foundPlaces} selectedPlace={selectedPlace} onSelectPlace={selectPlace} />
                    </Col>
                </Row>
            </Card.Body>
        </Card>
    );
};

export default RegionFilter;


Arquivo: Body/filters/RegionMap/ResultItem.tsx
import React from 'react';
import { Card, Button } from 'react-bootstrap';

interface ResultItemProps {
    place: any;
    isSelected: boolean;
    onSelect: () => void;
}

const ResultItem: React.FC<ResultItemProps> = ({ place, isSelected, onSelect }) => {
    return (
        <Card className="mb-2">
            <Card.Body>
                <Card.Title>{place.display_name.split(",")[0]}</Card.Title>
                <Card.Text>{place.display_name}</Card.Text>
                <Button variant={isSelected ? 'success' : 'outline-primary'} onClick={onSelect}>
                    {isSelected ? 'Selecionado' : 'Selecionar'}
                </Button>
            </Card.Body>
        </Card>
    );
};

export default ResultItem;


Arquivo: Body/filters/RegionMap/ResultList.tsx
import React from 'react';
import ResultItem from './ResultItem';
import { Card } from 'react-bootstrap';

interface ResultListProps {
    places: any[];
    selectedPlace: any;
    onSelectPlace: (place: any) => void;
}

const ResultList: React.FC<ResultListProps> = ({ places, selectedPlace, onSelectPlace }) => {
    return (
        <Card style={{ maxHeight: '400px', overflowY: 'auto' }}>
            <Card.Body>
                {places.length === 0 ? (
                    <div className="text-center text-muted">
                        Nenhum resultado encontrado. Digite o nome de um lugar para buscar.
                    </div>
                ) : (
                    places.map((place, index) => (
                        <ResultItem
                            key={index}
                            place={place}
                            isSelected={selectedPlace && selectedPlace.place_id === place.place_id}
                            onSelect={() => onSelectPlace(place)}
                        />
                    ))
                )}
                {selectedPlace === null && places.length > 0 && (
                    <div className="text-center text-muted mt-2">
                        Caso não tenha selecionado um lugar, as imagens de todos os lugares aparecerão aqui.
                    </div>
                )}
            </Card.Body>
        </Card>
    );
};

export default ResultList;


Arquivo: Body/filters/RegionMap/SearchBar.tsx
import React, { useState } from 'react';
import { Form, Button, Spinner } from 'react-bootstrap';

interface SearchBarProps {
    onSearch: (placeName: string) => void;
    loading: boolean;
}

const SearchBar: React.FC<SearchBarProps> = ({ onSearch, loading }) => {
    const [placeName, setPlaceName] = useState<string>('');

    const handleSearch = () => {
        onSearch(placeName);
    };

    return (
        <Form.Group controlId="regionSearchBar">
            <Form.Control
                type="text"
                placeholder="Nome do lugar (País, Estado, etc.)"
                value={placeName}
                onChange={(e) => setPlaceName(e.target.value)}
                className="mb-2"
            />
            <Button variant="primary" onClick={handleSearch} className="mb-2" disabled={loading}>
                {loading ? <Spinner animation="border" size="sm" /> : 'Buscar'}
            </Button>
        </Form.Group>
    );
};

export default SearchBar;


Arquivo: Body/filters/TagsFilter.tsx
import React, { useState } from 'react';
import { Form } from 'react-bootstrap';
import Select from 'react-select';

const tagOptions = [
    { value: 'Tag1', label: 'Tag 1' },
    { value: 'Tag2', label: 'Tag 2' },
    { value: 'Tag3', label: 'Tag 3' },
    // Adicione mais opções conforme necessário
];

const TagsFilter: React.FC = () => {
    const [selectedTags, setSelectedTags] = useState<any[]>([]);

    return (
        <Form.Group controlId="tagsFilter">
            <Form.Label>Tags Especiais</Form.Label>
            <Select
                isMulti
                options={tagOptions}
                value={selectedTags}
                onChange={(newValue: any, actionMeta: any) => setSelectedTags(newValue as any[])}
                placeholder="Digite as tags"
            />
        </Form.Group>
    );
};

export default TagsFilter;


Arquivo: Body/filters/TypeFilter.tsx
import React from 'react';
import { Form } from 'react-bootstrap';

const TypeFilter: React.FC = () => {
    return (
        <Form.Group controlId="typeFilter">
            <Form.Label>Tipo</Form.Label>
            <Form.Control type="text" placeholder="Digite o tipo" />
        </Form.Group>
    );
};

export default TypeFilter;


Arquivo: Body/toolbar.tsx
import React, { useState, useEffect } from 'react';
import { ButtonToolbar, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';

interface ToolbarProps {
    initialSelectedTool?: string;
    onToolChange?: (value: string) => void;
}

const Toolbar: React.FC<ToolbarProps> = ({ initialSelectedTool, onToolChange }) => {
    const [selectedTool, setSelectedTool] = useState<string>(initialSelectedTool || '');

    const handleToolChange = (value: string) => {
        setSelectedTool(value);
        if (onToolChange) {
            onToolChange(value);
        }
    };

    // Sync with external control if initialSelectedTool changes
    useEffect(() => {
        if (initialSelectedTool) {
            setSelectedTool(initialSelectedTool);
        }
    }, [initialSelectedTool]);

    return (
        <ButtonToolbar>
            <ToggleButtonGroup
                type="radio"
                name="toolsGroup1"
                value={selectedTool}
                onChange={(value) => handleToolChange(value)}
                className="mb-2"
            >
                <ToggleButton variant="outline-secondary" value="create" id="create">
                    Criar Poly Line
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="create" id="create">
                    Criar Bounding Box
                </ToggleButton>
            </ToggleButtonGroup>
            <ToggleButtonGroup
                type="radio"
                name="toolsGroup2"
                value={selectedTool}
                onChange={(value) => handleToolChange(value)}
                className="mb-2"
            >
                <ToggleButton variant="outline-secondary" value="select" id="select">
                    Selecionar
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="create" id="create">
                    Redimensionar
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="create" id="create">
                    mover
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="delete" id="delete">
                    Deletar
                </ToggleButton>
            </ToggleButtonGroup>
        </ButtonToolbar>
    );
};

export default Toolbar;


Arquivo: Header.tsx
import React, { useState } from 'react';
import { Navbar, Nav, Button, Badge, Offcanvas } from 'react-bootstrap';
import { FaBars, FaExclamationCircle, FaBell , FaHome, FaTachometerAlt, FaBox, FaUsers, FaClipboardList} from 'react-icons/fa';


const Header: React.FC = () => {
  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Navbar bg="dark" variant="dark" className="px-3">
        <Nav>
          <FaBars style={{ color: 'green', fontSize: '1.5em', cursor: 'pointer' }} onClick={handleShow} />
        </Nav>
        <img src="/icons/LOGO-1920w.webp" alt="Logo da Empresa" style={{ height: '50px', marginRight: 'auto', marginLeft: '10px' }} />
        <Navbar.Text className="mx-auto" style={{ color: 'white', fontSize: '1.5em' }}>
          Sistema Geral de Classificação (SGC)
        </Navbar.Text>
        <Nav className="ml-auto d-flex align-items-center">
          <Button variant="success" className="mr-5">Metas</Button> {/* Aumentei a margem direita para 'mr-5' */}
          <Button variant="success" className="mr-5" style={{ position: 'relative' }}> {/* Aumentei a margem direita para 'mr-5' */}
            <FaExclamationCircle style={{ color: 'white', fontSize: '1.2em' }} />
            <Badge pill bg="danger" style={{ position: 'absolute', top: '-5px', right: '-5px' }}>3</Badge>
          </Button>
          <Button variant="warning" className="mr-2" style={{ position: 'relative' }}>
            <FaBell style={{ color: 'white', fontSize: '1.2em' }} />
            <Badge pill bg="danger" style={{ position: 'absolute', top: '-5px', right: '-5px' }}>10</Badge>
          </Button>
        </Nav>
      </Navbar>

      <Offcanvas show={show} onHide={handleClose}>
        <Offcanvas.Header closeButton>
          <Offcanvas.Title>Sidebar</Offcanvas.Title>
        </Offcanvas.Header>
        <Offcanvas.Body className="p-0">
          <Nav className="flex-column bg-dark h-100 p-3">
            <Nav.Link href="#home" className="text-white">
              <FaHome className="mr-2" /> Home
            </Nav.Link>
            <Nav.Link href="#dashboard" className="text-white">
              <FaTachometerAlt className="mr-2" /> Dashboard
            </Nav.Link>
            <Nav.Link href="#orders" className="text-white">
              <FaClipboardList className="mr-2" /> Orders
            </Nav.Link>
            <Nav.Link href="#products" className="text-white">
              <FaBox className="mr-2" /> Products
            </Nav.Link>
            <Nav.Link href="#customers" className="text-white">
              <FaUsers className="mr-2" /> Customers
            </Nav.Link>
            <div className="mt-auto">
              <div className="d-flex align-items-center text-white">
                <img
                  src="https://via.placeholder.com/40"
                  alt="Profile"
                  className="rounded-circle mr-2"
                  width="40"
                  height="40"
                />
                <span>mdo</span>
              </div>
            </div>
          </Nav>
        </Offcanvas.Body>
      </Offcanvas>
    </>
  );
};

export default Header;




Arquivo: scripts/saidadnv.txt


Arquivo: setup_script
npm init -y
npm install typescript --save-dev
npm install @types/node --save-dev


npm install react react-dom
npm install --save-dev typescript @types/react @types/react-dom

npx tsc --init --rootDir src --outDir build \
--esModuleInterop --resolveJsonModule --lib es6 \
--module commonjs --allowJs true --noImplicitAny true

npm install --save-dev webpack webpack-cli webpack-dev-server html-webpack-plugin ts-loader
npm install --save-dev eslint prettier eslint-plugin-react eslint-plugin-react-hooks eslint-config-prettier eslint-plugin-prettier @typescript-eslint/eslint-plugin @typescript-eslint/parser

npm install bootstrap @types/bootstrap
npm install konva react-konva @types/konva


Arquivo: src/App.tsx


import React from 'react';
import Header from './componets/Header';
import Body from './componets/Body/Body';
import RegionFilter from './componets/Body/filters/RegionMap/RegionFilter';

const App: React.FC = () => {
  return (
    <>
      <Header />
      <Body />

    </>
  );
};

export default App;



Arquivo: src/componets/Body/Body.tsx
import React, { useState } from 'react';
import ImageFrame from './ImageFrame/ImageFrame';
import { Button, Container } from 'react-bootstrap';
import Toolbar from './Toolbar';
import FilterCollapse from './filters/FilterCollapse';

const Body: React.FC = () => {
    const [selectedTool, setSelectedTool] = useState<string>('');
    const [isCreating, setIsCreating] = useState<boolean>(false);

    const handleToolChange = (tool: string) => {
        setSelectedTool(tool);
        setIsCreating(tool === 'createPolyLine' || tool === 'createBoundingBox');
    };

    return (
        <div className="container">
            <div className="filter-section">
                <FilterCollapse />
            </div>

            <div className="tools">
                <Toolbar onToolChange={handleToolChange} isCreating={isCreating} />
            </div>
            
            <Container fluid style={{ height: '75vh', padding: 0 }}>
                <ImageFrame selectedTool={selectedTool} />
            </Container>

            <div className="button-bar d-flex justify-content-center">
                <Button variant="primary">Button 1</Button>
                <Button variant="secondary">Button 2</Button>
                <Button variant="success">Button 3</Button>
                {/* Add more buttons as needed */}
            </div>
        </div>
    );
};

export default Body;


Arquivo: src/componets/Body/FilterDropDown.tsx
import React from 'react';
import { Dropdown, DropdownButton, Form } from 'react-bootstrap';

const FilterDropdown: React.FC = () => {
    return (
        <DropdownButton id="dropdown-basic-button" title="Filtros" className="mb-3">
            <Dropdown.Item as="div">
                <Form.Group controlId="dateFilter">
                    <Form.Label>Data</Form.Label>
                    <Form.Control type="date" placeholder="Selecione a data" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="classFilter">
                    <Form.Label>Classe</Form.Label>
                    <Form.Control type="text" placeholder="Digite a classe" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="regionFilter">
                    <Form.Label>Região</Form.Label>
                    <Form.Control type="text" placeholder="Selecione a região no mapa" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="tagsFilter">
                    <Form.Label>Tags Especiais</Form.Label>
                    <Form.Control type="text" placeholder="Digite as tags" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="flagFilter">
                    <Form.Label>Flag</Form.Label>
                    <Form.Check type="checkbox" label="Ativar flag" />
                </Form.Group>
            </Dropdown.Item>
            <Dropdown.Item as="div">
                <Form.Group controlId="typeFilter">
                    <Form.Label>Tipo</Form.Label>
                    <Form.Control type="text" placeholder="Digite o tipo" />
                </Form.Group>
            </Dropdown.Item>
        </DropdownButton>
    );
};

export default FilterDropdown;


Arquivo: src/componets/Body/ImageFrame/BoundingBox.tsx
import React, { useState } from 'react';
import { Layer, Rect, Circle } from 'react-konva';
import { KonvaEventObject } from 'konva/lib/Node';

interface RectProps {
    x: number;
    y: number;
    width: number;
    height: number;
}

interface BoundingBoxProps {
    initialRect: RectProps;
}

const BoundingBox: React.FC<BoundingBoxProps> = ({ initialRect }) => {
    const [rectangle, setRectangle] = useState<RectProps>(initialRect);

    const handleDragMove = (e: KonvaEventObject<DragEvent>, index: number) => {
        const newRect = { ...rectangle };
        if (index === 0) {
            newRect.x = e.target.x();
            newRect.y = e.target.y();
        } else if (index === 1) {
            newRect.width = e.target.x() - newRect.x;
            newRect.height = e.target.y() - newRect.y;
        }
        setRectangle(newRect);
    };

    const handleDragEnd = () => {};

    return (
        <>
            <Rect
                x={rectangle.x}
                y={rectangle.y}
                width={rectangle.width}
                height={rectangle.height}
                stroke="blue"
                strokeWidth={2}
                draggable
                onDragMove={(e) => handleDragMove(e, 0)}
                onDragEnd={handleDragEnd}
            />
            <Circle
                x={rectangle.x}
                y={rectangle.y}
                radius={5}
                fill="blue"
                draggable
                onDragMove={(e) => handleDragMove(e, 0)}
                onDragEnd={handleDragEnd}
            />
            <Circle
                x={rectangle.x + rectangle.width}
                y={rectangle.y + rectangle.height}
                radius={5}
                fill="red"
                draggable
                onDragMove={(e) => handleDragMove(e, 1)}
                onDragEnd={handleDragEnd}
            />
        </>
    );
};

export default BoundingBox;


Arquivo: src/componets/Body/ImageFrame/Geometry.tsx
import React from 'react';
import PolyLine from './PolyLine';
import BoundingBox from './BoundingBox';

interface GeometryProps {
    type: 'polyline' | 'rectangle';
    points?: { x: number; y: number }[];
    initialRect?: { x: number; y: number; width: number; height: number };
}

const Geometry: React.FC<GeometryProps> = ({ type, points, initialRect }) => {
    if (type === 'polyline' && points) {
        return <PolyLine points={points} />;
    } else if (type === 'rectangle' && initialRect) {
        return <BoundingBox initialRect={initialRect} />;
    }
    return null;
};

export default Geometry;


Arquivo: src/componets/Body/ImageFrame/ImageFrame.tsx
import React, { useRef, useEffect, useState, useCallback } from 'react';
import { Stage, Layer, Rect, Line, Circle } from 'react-konva';
import Geometry from './Geometry';

interface Point {
    x: number;
    y: number;
}

interface RectProps {
    x: number;
    y: number;
    width: number;
    height: number;
}

interface GeometryItem {
    type: 'polyline' | 'rectangle';
    points?: Point[];
    initialRect?: RectProps;
}

interface ImageFrameProps {
    selectedTool: string;
}

const ImageFrame: React.FC<ImageFrameProps> = ({ selectedTool }) => {
    const containerRef = useRef<HTMLDivElement>(null);
    const [dimensions, setDimensions] = useState({ width: window.innerWidth, height: window.innerHeight });
    const [geometries, setGeometries] = useState<GeometryItem[]>([]);
    const [isCreating, setIsCreating] = useState(false);
    const [creatingType, setCreatingType] = useState<'polyline' | 'rectangle' | null>(null);
    const [currentPoints, setCurrentPoints] = useState<Point[]>([]);
    const [currentRect, setCurrentRect] = useState<RectProps | null>(null);

    useEffect(() => {
        const handleResize = () => {
            if (containerRef.current) {
                setDimensions({
                    width: containerRef.current.offsetWidth,
                    height: containerRef.current.offsetHeight,
                });
            }
        };

        window.addEventListener('resize', handleResize);
        handleResize();

        return () => {
            window.removeEventListener('resize', handleResize);
        };
    }, []);

    useEffect(() => {
        if (selectedTool === 'createPolyLine') {
            setIsCreating(true);
            setCreatingType('polyline');
        } else if (selectedTool === 'createBoundingBox') {
            setIsCreating(true);
            setCreatingType('rectangle');
        } else {
            setIsCreating(false);
            setCreatingType(null);
        }
    }, [selectedTool]);

    const handleStageMouseDown = (e: any) => {
        if (isCreating && creatingType === 'rectangle' && currentRect === null) {
            const { x, y } = e.target.getStage().getPointerPosition();
            setCurrentRect({ x, y, width: 0, height: 0 });
        } else if (isCreating && creatingType === 'polyline') {
            const { x, y } = e.target.getStage().getPointerPosition();
            setCurrentPoints([...currentPoints, { x, y }]);
        }
    };

    const handleStageMouseMove = (e: any) => {
        if (isCreating) {
            const { x, y } = e.target.getStage().getPointerPosition();
            if (creatingType === 'rectangle' && currentRect) {
                setCurrentRect({
                    ...currentRect,
                    width: x - currentRect.x,
                    height: y - currentRect.y,
                });
            } else if (creatingType === 'polyline' && currentPoints.length > 0) {
                const points = [...currentPoints, { x, y }];
                setCurrentPoints(points);
            }
        }
    };

    const handleStageMouseUp = (e: any) => {
        if (isCreating && creatingType === 'rectangle' && currentRect) {
            setGeometries([...geometries, { type: 'rectangle', initialRect: currentRect }]);
            setCurrentRect(null);
            setIsCreating(false);
        }
    };

    const handleKeyDown = (e: KeyboardEvent) => {
        if (e.key === 'Escape' && isCreating) {
            setIsCreating(false);
            setCurrentPoints([]);
            setCurrentRect(null);
        }
    };

    useEffect(() => {
        window.addEventListener('keydown', handleKeyDown);
        return () => {
            window.removeEventListener('keydown', handleKeyDown);
        };
    }, [isCreating]);

    const handlePolygonComplete = () => {
        setGeometries([...geometries, { type: 'polyline', points: currentPoints }]);
        setCurrentPoints([]);
        setIsCreating(false);
    };

    return (
        <div ref={containerRef} style={{ width: '100%', height: '100%', backgroundColor: '#5c949f' }}>
            <Stage
                width={dimensions.width}
                height={dimensions.height}
                onMouseDown={handleStageMouseDown}
                onMouseMove={handleStageMouseMove}
                onMouseUp={handleStageMouseUp}
            >
                <Layer>
                    <Rect
                        x={0}
                        y={0}
                        width={dimensions.width}
                        height={dimensions.height}
                        fill="lightgray" // Cor de fundo do canvas
                    />
                    {geometries.map((geo, index) => (
                        <Geometry
                            key={index}
                            type={geo.type}
                            points={geo.points}
                            initialRect={geo.initialRect}
                        />
                    ))}
                    {isCreating && creatingType === 'polyline' && (
                        <>
                            <Line
                                points={currentPoints.flatMap(p => [p.x, p.y])}
                                stroke="red"
                                strokeWidth={2}
                                lineCap="round"
                                lineJoin="round"
                            />
                            {currentPoints.map((point, index) => (
                                <Circle
                                    key={index}
                                    x={point.x}
                                    y={point.y}
                                    radius={5}
                                    fill="blue"
                                    draggable
                                    onDragMove={(e) => handleStageMouseMove(e)}
                                    onDragEnd={() => handlePolygonComplete()}
                                />
                            ))}
                        </>
                    )}
                    {isCreating && creatingType === 'rectangle' && currentRect && (
                        <Rect
                            x={currentRect.x}
                            y={currentRect.y}
                            width={currentRect.width}
                            height={currentRect.height}
                            stroke="blue"
                            strokeWidth={2}
                            dash={[4, 4]}
                        />
                    )}
                </Layer>
            </Stage>
        </div>
    );
};

export default ImageFrame;


Arquivo: src/componets/Body/ImageFrame/PolyLine.tsx
import React, { useState } from 'react';
import { Layer, Line, Circle } from 'react-konva';
import { KonvaEventObject } from 'konva/lib/Node';

interface Point {
    x: number;
    y: number;
}

interface PolyLineProps {
    points: Point[];
}

const PolyLine: React.FC<PolyLineProps> = ({ points }) => {
    const [polyPoints, setPolyPoints] = useState<Point[]>(points);

    const handleDragMove = (e: KonvaEventObject<DragEvent>, index: number) => {
        const newPoints = [...polyPoints];
        newPoints[index] = { x: e.target.x(), y: e.target.y() };
        setPolyPoints(newPoints);
    };

    const handleDragEnd = () => {};

    const handleInsertPoint = (index: number, newPoint: Point) => {
        const newPoints = [...polyPoints];
        newPoints.splice(index, 0, newPoint);
        setPolyPoints(newPoints);
    };

    const calculateMidPoint = (pointA: Point, pointB: Point): Point => {
        return {
            x: (pointA.x + pointB.x) / 2,
            y: (pointA.y + pointB.y) / 2,
        };
    };

    return (
        <>
            <Line
                points={polyPoints.flatMap(p => [p.x, p.y])}
                stroke="red"
                

                strokeWidth={2}
            />s
            {polyPoints.map((point, index) => (
                <Circle
                    key={index}
                    x={point.x}
                    y={point.y}
                    radius={5}
                    fill="blue"
                    draggable
                    onDragMove={(e) => handleDragMove(e, index)}
                    onDragEnd={handleDragEnd}
                />
            ))}
            {polyPoints.map((point, index) => {
                if (index === polyPoints.length - 1) return null;
                const midPoint = calculateMidPoint(point, polyPoints[index + 1]);
                return (
                    <Circle
                        key={`mid-${index}`}
                        x={midPoint.x}
                        y={midPoint.y}
                        radius={5}
                        fill="green"
                        draggable
                        onDragEnd={(e) => handleInsertPoint(index + 1, { x: e.target.x(), y: e.target.y() })}
                    />
                );
            })}
        </>
    );
};

export default PolyLine;


Arquivo: src/componets/Body/Toolbar.tsx
import React, { useState, useEffect } from 'react';
import { ButtonToolbar, ToggleButton, ToggleButtonGroup } from 'react-bootstrap';

interface ToolbarProps {
    onToolChange: (value: string) => void;
    isCreating: boolean;
}

const Toolbar: React.FC<ToolbarProps> = ({ onToolChange, isCreating }) => {
    const [selectedTool, setSelectedTool] = useState<string>('');

    const handleToolChange = (value: string) => {
        if (!isCreating) {
            setSelectedTool(value);
            onToolChange(value);
        }
    };

    useEffect(() => {
        if (!isCreating) {
            setSelectedTool('');
        }
    }, [isCreating]);

    return (
        <ButtonToolbar>
            <ToggleButtonGroup
                type="radio"
                name="toolsGroup1"
                value={selectedTool}
                onChange={(value) => handleToolChange(value)}
                className="mb-2"
            >
                <ToggleButton variant="outline-secondary" value="createPolyLine" id="createPolyLine" disabled={isCreating}>
                    {isCreating && selectedTool === 'createPolyLine' ? 'Criando Poly Line' : 'Criar Poly Line'}
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="createBoundingBox" id="createBoundingBox" disabled={isCreating}>
                    {isCreating && selectedTool === 'createBoundingBox' ? 'Criando Bounding Box' : 'Criar Bounding Box'}
                </ToggleButton>
            </ToggleButtonGroup>
            <ToggleButtonGroup
                type="radio"
                name="toolsGroup2"
                value={selectedTool}
                onChange={(value) => handleToolChange(value)}
                className="mb-2"
            >
                <ToggleButton variant="outline-secondary" value="select" id="select" disabled={isCreating}>
                    Selecionar
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="resize" id="resize" disabled={isCreating}>
                    Redimensionar
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="move" id="move" disabled={isCreating}>
                    Mover
                </ToggleButton>
                <ToggleButton variant="outline-secondary" value="delete" id="delete" disabled={isCreating}>
                    Deletar
                </ToggleButton>
            </ToggleButtonGroup>
        </ButtonToolbar>
    );
};

export default Toolbar;


Arquivo: src/componets/Body/filters/ClassFilter.tsx
import React, { useState } from 'react';
import { Form } from 'react-bootstrap';
import Select from 'react-select';

const classOptions = [
    { value: 1, label: 'Classe 1' },
    { value: 2, label: 'Classe 2' },
    { value: 3, label: 'Classe 3' },
    // Adicione mais opções conforme necessário
];

const ClassFilter: React.FC = () => {
    const [selectedClasses, setSelectedClasses] = useState<any[]>([]);

    return (
        <Form.Group controlId="classFilter">
            <Form.Label>Classe</Form.Label>
            <Select
                isMulti
                options={classOptions}
                value={selectedClasses}
                onChange={(newValue, actionMeta) => setSelectedClasses(Array.from(newValue))}
                placeholder="Selecione as classes"
            />
        </Form.Group>
    );
};

export default ClassFilter;


Arquivo: src/componets/Body/filters/DateFilter.tsx
import React, { useState } from 'react';
import { Form, Row, Col } from 'react-bootstrap';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

const DateFilter: React.FC = () => {
    const [startDate, setStartDate] = useState<Date | null>(null);
    const [endDate, setEndDate] = useState<Date | null>(null);

    return (
        <Form.Group controlId="dateFilter">
            <Form.Label>Data</Form.Label>
            <Row>
                <Col>
                    <Form.Label>Início</Form.Label>
                    <DatePicker
                        selected={startDate}
                        onChange={(date) => setStartDate(date)}
                        className="form-control"
                        placeholderText="Data de Início"
                    />
                </Col>
                <Col>
                    <Form.Label>Fim</Form.Label>
                    <DatePicker
                        selected={endDate}
                        onChange={(date) => setEndDate(date)}
                        className="form-control"
                        placeholderText="Data de Fim"
                    />
                </Col>
            </Row>
        </Form.Group>
    );
};

export default DateFilter;


Arquivo: src/componets/Body/filters/FilterCollapse.tsx
import React, { useState } from 'react';
import { Button, Collapse, Form, Card } from 'react-bootstrap';
import { FaChevronDown, FaChevronUp } from 'react-icons/fa';
import DateFilter from './DateFilter';
import ClassFilter from './ClassFilter';
import RegionFilter from './RegionMap/RegionFilter';
import TagsFilter from './TagsFilter';
import FlagFilter from './FlagFilter';
import TypeFilter from './TypeFilter';

const FilterCollapse: React.FC = () => {
    const [open, setOpen] = useState(false);

    return (
        <>
            <Button
                onClick={() => setOpen(!open)}
                aria-controls="example-collapse-text"
                aria-expanded={open}
                className="mb-3"
                variant="primary"
            >
                Filtros {open ? <FaChevronUp /> : <FaChevronDown />}
            </Button>
            <Collapse in={open}>
                <div id="example-collapse-text">
                    <Card>
                        <Card.Body>
                            <Form>
                                <RegionFilter isOpen={open} />
                                <DateFilter />
                                <ClassFilter />
                                <TagsFilter />
                                <FlagFilter />
                                <TypeFilter />
                            </Form>
                        </Card.Body>
                    </Card>
                </div>
            </Collapse>
        </>
    );
};

export default FilterCollapse;


Arquivo: src/componets/Body/filters/FlagFilter.tsx
import React from 'react';
import { Form } from 'react-bootstrap';

const FlagFilter: React.FC = () => {
    return (
        <Form.Group controlId="flagFilter">
            <Form.Label>Flag</Form.Label>
            <Form.Check type="checkbox" label="Ativar flag" />
        </Form.Group>
    );
};

export default FlagFilter;


Arquivo: src/componets/Body/filters/RegionMap/MapView.tsx
import React, { useEffect } from 'react';
import { MapContainer, TileLayer, Polygon, Marker, useMap } from 'react-leaflet';
import 'leaflet/dist/leaflet.css';
import L from 'leaflet';

const MapView: React.FC<{ center: [number, number]; zoom: number; selectedRegion: any[]; isPolygon: boolean; isOpen: boolean; }> = ({ center, zoom, selectedRegion, isPolygon, isOpen }) => {
    const MapEvents = () => {
        const map = useMap();

        useEffect(() => {
            map.invalidateSize();
        }, [isOpen]);

        map.setView(center, zoom);
        return null;
    };

    return (
        <div style={{ height: '400px', width: '100%' }}>
            <MapContainer center={center} zoom={zoom} style={{ height: '100%', width: '100%' }}>
                <TileLayer
                    url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
                    attribution="&copy; OpenStreetMap contributors"
                />
                {isPolygon ? (
                    <Polygon positions={selectedRegion} />
                ) : (
                    <Marker position={center} icon={L.icon({
                        iconUrl: 'https://cdnjs.cloudflare.com/ajax/libs/leaflet/1.7.1/images/marker-icon.png',
                        iconSize: [25, 41],
                        iconAnchor: [12, 41],
                    })} />
                )}
                <MapEvents />
            </MapContainer>
        </div>
    );
};

export default MapView;


Arquivo: src/componets/Body/filters/RegionMap/RegionFilter.tsx
import React, { useState, useEffect } from 'react';
import { Row, Col, Card } from 'react-bootstrap';
import axios from 'axios';
import MapView from './MapView';
import SearchBar from './SearchBar';
import ResultList from './ResultList';

const RegionFilter: React.FC<{ isOpen: boolean }> = ({ isOpen }) => {
    const [selectedRegion, setSelectedRegion] = useState<any[]>([]);
    const [center, setCenter] = useState<[number, number]>([0, 0]);
    const [zoom, setZoom] = useState<number>(2);
    const [isPolygon, setIsPolygon] = useState<boolean>(false);
    const [loading, setLoading] = useState<boolean>(false);
    const [foundPlaces, setFoundPlaces] = useState<any[]>([]);
    const [selectedPlace, setSelectedPlace] = useState<any>(null);

    useEffect(() => {
        if (isOpen) {
            setTimeout(() => {
                window.dispatchEvent(new Event('resize'));
            }, 100);
        }
    }, [isOpen]);

    const handleSearch = async (placeName: string) => {
        if (!placeName) return;

        setLoading(true);
        try {
            const response = await axios.get(`https://nominatim.openstreetmap.org/search`, {
                params: {
                    q: placeName,
                    format: 'json',
                    polygon_geojson: 1,
                },
            });

            if (response.data.length > 0) {
                setFoundPlaces(response.data);
            } else {
                alert('Local não encontrado');
                setFoundPlaces([]);
            }
        } catch (error) {
            console.error('Erro ao buscar o local:', error);
            alert('Erro ao buscar o local');
            setFoundPlaces([]);
        } finally {
            setLoading(false);
        }
    };

    const selectPlace = (place: any) => {
        setSelectedPlace(place);
        if (place.geojson && place.geojson.type === 'Polygon') {
            const coordinates = place.geojson.coordinates[0].map((coord: [number, number]) => ({
                lat: coord[1],
                lng: coord[0],
            }));
            setSelectedRegion(coordinates);
            setCenter([parseFloat(place.lat), parseFloat(place.lon)]);
            setZoom(10);
            setIsPolygon(true);
        } else {
            setSelectedRegion([]);
            setCenter([parseFloat(place.lat), parseFloat(place.lon)]);
            setZoom(15);
            setIsPolygon(false);
        }
    };

    return (
        <Card className="mb-3">
            <Card.Body>
                <Row>
                    <Col md={8}>
                        <MapView center={center} zoom={zoom} selectedRegion={selectedRegion} isPolygon={isPolygon} isOpen={isOpen} />
                    </Col>
                    <Col md={4}>
                        <SearchBar onSearch={handleSearch} loading={loading} />
                        <ResultList places={foundPlaces} selectedPlace={selectedPlace} onSelectPlace={selectPlace} />
                    </Col>
                </Row>
            </Card.Body>
        </Card>
    );
};

export default RegionFilter;


Arquivo: src/componets/Body/filters/RegionMap/ResultItem.tsx
import React from 'react';
import { Card, Button } from 'react-bootstrap';

interface ResultItemProps {
    place: any;
    isSelected: boolean;
    onSelect: () => void;
}

const ResultItem: React.FC<ResultItemProps> = ({ place, isSelected, onSelect }) => {
    return (
        <Card className="mb-2">
            <Card.Body>
                <Card.Title>{place.display_name.split(",")[0]}</Card.Title>
                <Card.Text>{place.display_name}</Card.Text>
                <Button variant={isSelected ? 'success' : 'outline-primary'} onClick={onSelect}>
                    {isSelected ? 'Selecionado' : 'Selecionar'}
                </Button>
            </Card.Body>
        </Card>
    );
};

export default ResultItem;


Arquivo: src/componets/Body/filters/RegionMap/ResultList.tsx
import React from 'react';
import ResultItem from './ResultItem';
import { Card } from 'react-bootstrap';

interface ResultListProps {
    places: any[];
    selectedPlace: any;
    onSelectPlace: (place: any) => void;
}

const ResultList: React.FC<ResultListProps> = ({ places, selectedPlace, onSelectPlace }) => {
    return (
        <Card style={{ maxHeight: '400px', overflowY: 'auto' }}>
            <Card.Body>
                {places.length === 0 ? (
                    <div className="text-center text-muted">
                        Nenhum resultado encontrado. Digite o nome de um lugar para buscar.
                    </div>
                ) : (
                    places.map((place, index) => (
                        <ResultItem
                            key={index}
                            place={place}
                            isSelected={selectedPlace && selectedPlace.place_id === place.place_id}
                            onSelect={() => onSelectPlace(place)}
                        />
                    ))
                )}
                {selectedPlace === null && places.length > 0 && (
                    <div className="text-center text-muted mt-2">
                        Caso não tenha selecionado um lugar, as imagens de todos os lugares aparecerão aqui.
                    </div>
                )}
            </Card.Body>
        </Card>
    );
};

export default ResultList;


Arquivo: src/componets/Body/filters/RegionMap/SearchBar.tsx
import React, { useState } from 'react';
import { Form, Button, Spinner } from 'react-bootstrap';

interface SearchBarProps {
    onSearch: (placeName: string) => void;
    loading: boolean;
}

const SearchBar: React.FC<SearchBarProps> = ({ onSearch, loading }) => {
    const [placeName, setPlaceName] = useState<string>('');

    const handleSearch = () => {
        onSearch(placeName);
    };

    return (
        <Form.Group controlId="regionSearchBar">
            <Form.Control
                type="text"
                placeholder="Nome do lugar (País, Estado, etc.)"
                value={placeName}
                onChange={(e) => setPlaceName(e.target.value)}
                className="mb-2"
            />
            <Button variant="primary" onClick={handleSearch} className="mb-2" disabled={loading}>
                {loading ? <Spinner animation="border" size="sm" /> : 'Buscar'}
            </Button>
        </Form.Group>
    );
};

export default SearchBar;


Arquivo: src/componets/Body/filters/TagsFilter.tsx
import React, { useState } from 'react';
import { Form } from 'react-bootstrap';
import Select from 'react-select';

const tagOptions = [
    { value: 'Tag1', label: 'Tag 1' },
    { value: 'Tag2', label: 'Tag 2' },
    { value: 'Tag3', label: 'Tag 3' },
    // Adicione mais opções conforme necessário
];

const TagsFilter: React.FC = () => {
    const [selectedTags, setSelectedTags] = useState<any[]>([]);

    return (
        <Form.Group controlId="tagsFilter">
            <Form.Label>Tags Especiais</Form.Label>
            <Select
                isMulti
                options={tagOptions}
                value={selectedTags}
                onChange={(newValue: any, actionMeta: any) => setSelectedTags(newValue as any[])}
                placeholder="Digite as tags"
            />
        </Form.Group>
    );
};

export default TagsFilter;


Arquivo: src/componets/Body/filters/TypeFilter.tsx
import React from 'react';
import { Form } from 'react-bootstrap';

const TypeFilter: React.FC = () => {
    return (
        <Form.Group controlId="typeFilter">
            <Form.Label>Tipo</Form.Label>
            <Form.Control type="text" placeholder="Digite o tipo" />
        </Form.Group>
    );
};

export default TypeFilter;


Arquivo: src/componets/Header.tsx
import React, { useState } from 'react';
import { Navbar, Nav, Button, Badge, Offcanvas } from 'react-bootstrap';
import { FaBars, FaExclamationCircle, FaBell , FaHome, FaTachometerAlt, FaBox, FaUsers, FaClipboardList} from 'react-icons/fa';


const Header: React.FC = () => {
  const [show, setShow] = useState(false);

  const handleClose = () => setShow(false);
  const handleShow = () => setShow(true);

  return (
    <>
      <Navbar bg="dark" variant="dark" className="px-3">
        <Nav>
          <FaBars style={{ color: 'green', fontSize: '1.5em', cursor: 'pointer' }} onClick={handleShow} />
        </Nav>
        <img src="/icons/LOGO-1920w.webp" alt="Logo da Empresa" style={{ height: '50px', marginRight: 'auto', marginLeft: '10px' }} />
        <Navbar.Text className="mx-auto" style={{ color: 'white', fontSize: '1.5em' }}>
          Sistema Geral de Classificação (SGC)
        </Navbar.Text>
        <Nav className="ml-auto d-flex align-items-center">
          <Button variant="success" className="mr-5">Metas</Button> {/* Aumentei a margem direita para 'mr-5' */}
          <Button variant="success" className="mr-5" style={{ position: 'relative' }}> {/* Aumentei a margem direita para 'mr-5' */}
            <FaExclamationCircle style={{ color: 'white', fontSize: '1.2em' }} />
            <Badge pill bg="danger" style={{ position: 'absolute', top: '-5px', right: '-5px' }}>3</Badge>
          </Button>
          <Button variant="warning" className="mr-2" style={{ position: 'relative' }}>
            <FaBell style={{ color: 'white', fontSize: '1.2em' }} />
            <Badge pill bg="danger" style={{ position: 'absolute', top: '-5px', right: '-5px' }}>10</Badge>
          </Button>
        </Nav>
      </Navbar>

      <Offcanvas show={show} onHide={handleClose}>
        <Offcanvas.Header closeButton>
          <Offcanvas.Title>Sidebar</Offcanvas.Title>
        </Offcanvas.Header>
        <Offcanvas.Body className="p-0">
          <Nav className="flex-column bg-dark h-100 p-3">
            <Nav.Link href="#home" className="text-white">
              <FaHome className="mr-2" /> Home
            </Nav.Link>
            <Nav.Link href="#dashboard" className="text-white">
              <FaTachometerAlt className="mr-2" /> Dashboard
            </Nav.Link>
            <Nav.Link href="#orders" className="text-white">
              <FaClipboardList className="mr-2" /> Orders
            </Nav.Link>
            <Nav.Link href="#products" className="text-white">
              <FaBox className="mr-2" /> Products
            </Nav.Link>
            <Nav.Link href="#customers" className="text-white">
              <FaUsers className="mr-2" /> Customers
            </Nav.Link>
            <div className="mt-auto">
              <div className="d-flex align-items-center text-white">
                <img
                  src="https://via.placeholder.com/40"
                  alt="Profile"
                  className="rounded-circle mr-2"
                  width="40"
                  height="40"
                />
                <span>mdo</span>
              </div>
            </div>
          </Nav>
        </Offcanvas.Body>
      </Offcanvas>
    </>
  );
};

export default Header;


Arquivo: src/declarations.d.ts
declare module '*.png' {
    const value: string;
    export default value;
  }
  declare module '*.jpg' {
    const value: string;
    export default value;
  }
  declare module '*.jpeg' {
    const value: string;
    export default value;
  }
  declare module '*.gif' {
    const value: string;
    export default value;
  }
  declare module '*.svg' {
    const value: string;
    export default value;
  }
  declare module '*.webp' {
    const value: string;
    export default value;
  }
  

Arquivo: src/index.tsx
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import 'bootstrap/dist/css/bootstrap.min.css';

const container = document.getElementById('root');
const root = createRoot(container!);
root.render(<App />);


Arquivo: src/react-app-env.d.ts
/// <reference types="react-scripts" />


Arquivo: tsconfig.json
{
  "compilerOptions": {
    "target": "es2022",
    "lib": ["dom", "es2022"],
    "jsx": "react",
    "module": "commonjs",
    "moduleResolution": "node",
    "strict": true,
    "esModuleInterop": true,
    "skipLibCheck": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": ["src"]
}


Arquivo: webpack.config.js
const path = require('path');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const ESLintPlugin = require('eslint-webpack-plugin');

module.exports = {
  entry: './src/index.tsx',
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  },
  resolve: {
    extensions: ['.ts', '.tsx', '.js']
  },
  module: {
    rules: [
      {
        test: /\.tsx?$/,
        use: 'ts-loader',
        exclude: /node_modules/
      }, 
      {
        test: /\.(sass|css)$/,
        use: ['style-loader', 'css-loader']
      },
      {
        test: /\.(png|jpe?g|gif|svg|webp)$/i,
        use: [
          {
            loader: 'file-loader',
            options: {
              name: './public/icons/[name].[ext]',
            },
          },
        ]
      }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({
      template: './public/index.html'
    }),
    [new ESLintPlugin()]
  ],
  devServer: {
    static: {
      directory: path.join(__dirname, 'public')
    },


    compress: true,
    port: 3002
  }
};


